const admin = require('firebase-admin');
const serviceAccount = require('./serviceAccountKey.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: 'https://alkobot-7de63-default-rtdb.europe-west1.firebasedatabase.app'
});

const database = admin.database();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
async function enableFreeMonth(days) {
    try {
        await database.ref('settings/subscription').update({
            freeMonthEnabled: true,
            freeMonthDays: days
        });
        console.log('‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞');
        console.log(`üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${days} –¥–Ω–µ–π`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
async function disableFreeMonth() {
    try {
        await database.ref('settings/subscription').update({
            freeMonthEnabled: false
        });
        console.log('‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUserStats() {
    try {
        const usersSnapshot = await database.ref('users').once('value');
        const users = usersSnapshot.val() || {};
        
        const totalUsers = Object.keys(users).length;
        const subscribedUsers = Object.values(users).filter(user => user.subscriptionEndDate && user.subscriptionEndDate > Date.now()).length;
        
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
        console.log(`üíé –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: ${subscribedUsers}`);
        console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–∞—Ç—è—â–∏—Ö: ${((subscribedUsers / totalUsers) * 100).toFixed(1)}%\n`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];
const days = parseInt(process.argv[3]);

async function main() {
    switch (command) {
        case 'on':
            if (isNaN(days) || days <= 0) {
                console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π');
                console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
                console.log('node manage-subscription.js on 30    # –í–∫–ª—é—á–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π');
                console.log('node manage-subscription.js off      # –í—ã–∫–ª—é—á–∏—Ç—å');
                console.log('node manage-subscription.js stats    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
                process.exit(1);
            }
            await enableFreeMonth(days);
            break;
            
        case 'off':
            await disableFreeMonth();
            break;
            
        case 'stats':
            await getUserStats();
            break;
            
        default:
            console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
            console.log('node manage-subscription.js on 30    # –í–∫–ª—é—á–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π');
            console.log('node manage-subscription.js off      # –í—ã–∫–ª—é—á–∏—Ç—å');
            console.log('node manage-subscription.js stats    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    }
    process.exit();
}

main();
