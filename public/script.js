// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const firebaseConfig = {
    apiKey: "AIzaSyBsVVKxvVrGKJ_YjFrqzQHlNvZhHYhOBtk",
    authDomain: "alkobot-7de63.firebaseapp.com",
    databaseURL: "https://alkobot-7de63-default-rtdb.europe-west1.firebasedatabase.app",
    projectId: "alkobot-7de63",
    storageBucket: "alkobot-7de63.appspot.com",
    messagingSenderId: "228623628440",
    appId: "1:228623628440:web:0c8777b0c4b6f5c6c4c0b5",
    measurementId: "G-YPXP9GGZR1"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.ready();

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
setTimeout(() => {
    tg.expand();
}, 100);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function initUser() {
    if (!tg.initDataUnsafe?.user?.id) {
        console.error('No user data available');
        return;
    }

    const userId = tg.initDataUnsafe.user.id;
    const userRef = database.ref(`users/${userId}`);

    try {
        const snapshot = await userRef.once('value');
        if (!snapshot.exists()) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            await userRef.set({
                username: tg.initDataUnsafe.user.username || '',
                firstName: tg.initDataUnsafe.user.first_name || '',
                startTime: null,
                friends: []
            });
            console.log('New user created:', userId);
        }
    } catch (error) {
        console.error('Error initializing user:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initUser();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
const timerDisplay = document.getElementById('timer');
const homeScreen = document.getElementById('homeScreen');
const statsScreen = document.getElementById('statsScreen');

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
const userId = tg.initDataUnsafe?.user?.id || 'anonymous';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let startTime = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function calculateTime(startTime) {
    if (!startTime || startTime === 'null' || isNaN(parseInt(startTime))) {
        return null;
    }

    try {
        startTime = parseInt(startTime);
        if (startTime > Date.now()) {
            return null;
        }

        const now = Date.now();
        const diff = now - startTime;
        
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (days > 36500) return null;

        return {
            days,
            hours,
            minutes,
            text: days > 0 ? `${days}–¥ ${hours}—á ${minutes}–º–∏–Ω` : 
                  hours > 0 ? `${hours}—á ${minutes}–º–∏–Ω` : 
                  `${minutes}–º–∏–Ω`
        };
    } catch (error) {
        console.error('Error calculating time:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTimeToString(time) {
    if (!time) return '–µ—â–µ –Ω–µ –Ω–∞—á–∞–ª';
    return time.text;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
function updateTimer() {
    if (!startTime) {
        timerDisplay.textContent = '–ù–∞–∂–º–∏ "–°—Ç–∞—Ä—Ç"';
        return;
    }
    
    const time = calculateTime(startTime);
    if (time) {
        timerDisplay.textContent = time.text;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥—Ä—É–≥–∞
function updateFriendTimer(timeSpan, startTime) {
    if (!startTime || startTime === 'null') {
        timeSpan.textContent = '–ë—É—Ö–∞–µ—Ç';
        timeSpan.style.color = '#ff3333';
        return;
    }
    
    const time = calculateTime(startTime);
    if (time) {
        timeSpan.textContent = time.text;
        timeSpan.style.color = '#00cc00';
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –¥—Ä—É–∑–µ–π
function updateAllFriendTimers() {
    const timers = document.querySelectorAll('.friend-timer');
    timers.forEach(timer => {
        const startTime = timer.dataset.startTime;
        if (startTime) {
            updateFriendTimer(timer, startTime);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
function startTimerUpdates() {
    if (window.timerIntervals) {
        window.timerIntervals.forEach(interval => clearInterval(interval));
    }
    
    updateTimer();
    updateAllFriendTimers();
    
    window.timerIntervals = [
        setInterval(updateTimer, 5000),
        setInterval(updateAllFriendTimers, 5000)
    ];
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserExists(username) {
    try {
        const snapshot = await database.ref('users').once('value');
        const users = snapshot.val() || {};
        return Object.values(users).some(user => user.username === username);
    } catch (error) {
        console.error('Error checking user:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥—Ä—É–≥–∞
function createFriendElement(friend, index, showDelete = false, isStats = false) {
    const li = document.createElement('li');
    li.style.transition = 'all 0.3s ease';
    
    const wrapper = document.createElement('div');
    wrapper.className = 'friend-item';

    const friendInfoContainer = document.createElement('div');
    friendInfoContainer.className = 'friend-info';

    const displayName = document.createElement('div');
    displayName.className = 'friend-display-name';
    displayName.textContent = friend.firstName || '–ê–Ω–æ–Ω–∏–º';

    const username = document.createElement('div');
    username.className = 'friend-username';
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∏–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞
    if (friend.username === '@gordeytgg' || friend.firstName === '01') {
        username.innerHTML = `üë®‚Äçüíª <span style="color: #ff4444;">${friend.username}</span>`;
        username.style.display = 'flex';
        username.style.alignItems = 'center';
        username.style.gap = '4px';
        displayName.style.color = '#ff4444';
    } else {
        username.textContent = friend.username;
    }

    friendInfoContainer.appendChild(displayName);
    friendInfoContainer.appendChild(username);

    const timeSpan = document.createElement('span');
    timeSpan.className = 'friend-timer';
    timeSpan.dataset.startTime = friend.startTime;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª—å –¥–ª—è —Ç–æ–ø-3
    let medal = '';
    if (index === 0) medal = 'ü•á';
    else if (index === 1) medal = 'ü•à';
    else if (index === 2) medal = 'ü•â';
    
    const medalHtml = medal ? `<span class="friend-medal">${medal}</span>` : '';
    
    wrapper.innerHTML = medalHtml;
    wrapper.appendChild(friendInfoContainer);
    wrapper.appendChild(timeSpan);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ showDelete = true
    if (showDelete) {
        const removeBtn = document.createElement('button');
        removeBtn.className = isStats ? 'delete-friend' : 'remove-friend';
        removeBtn.innerHTML = '√ó';
        removeBtn.onclick = (e) => {
            e.stopPropagation();
            removeFriend(friend.username, li);
        };
        wrapper.appendChild(removeBtn);
    }
    
    li.appendChild(wrapper);
    updateFriendTimer(timeSpan, friend.startTime);
    
    return li;
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
async function addFriend(username) {
    console.log('Adding friend:', username);
    
    if (!username) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return false;
    }
    
    try {
        username = username.trim();
        if (username.startsWith('@')) {
            username = username.substring(1);
        }

        console.log('Checking username:', username);

        if (username === tg.initDataUnsafe?.user?.username) {
            alert('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è');
            return false;
        }

        const exists = await checkUserExists(username);
        console.log('User exists:', exists);
        
        if (!exists) {
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }

        const snapshot = await database.ref(`users/${userId}`).once('value');
        const userData = snapshot.val() || {};
        const currentFriends = userData.friends || [];
        
        console.log('Current friends:', currentFriends);
        
        if (currentFriends.includes(username)) {
            alert('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π');
            return false;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        currentFriends.push(username);
        console.log('Updating friends list:', currentFriends);
        
        await database.ref(`users/${userId}`).update({ friends: currentFriends });
        console.log('Database updated');

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞
        await renderFriendsList();
        await renderFriendsStats();
        
        return true;

    } catch (error) {
        console.error('Error adding friend:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
async function removeFriend(username, element) {
    try {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        element.style.opacity = '0';
        element.style.transform = 'translateY(20px)';
        
        await new Promise(resolve => setTimeout(resolve, 300));
        
        const snapshot = await database.ref(`users/${userId}`).once('value');
        const userData = snapshot.val() || {};
        const currentFriends = (userData.friends || []).filter(f => f !== username);
        
        await database.ref(`users/${userId}`).update({ friends: currentFriends });
        
        if (currentFriends.length === 0) {
            const friendsList = document.getElementById('friendsList');
            const emptyMessage = document.createElement('li');
            emptyMessage.textContent = '–î–æ–±–∞–≤—å –¥—Ä—É–∑–µ–π —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å';
            friendsList.innerHTML = '';
            friendsList.appendChild(emptyMessage);
        } else {
            element.remove();
        }
    } catch (error) {
        console.error('Error removing friend:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞');
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        element.style.opacity = '1';
        element.style.transform = 'translateY(0)';
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥—Ä—É–∑–µ–π
async function renderFriends() {
    try {
        const friendsList = document.getElementById('friendsList');
        friendsList.innerHTML = '';
        
        const snapshot = await database.ref(`users/${userId}`).once('value');
        const currentFriends = snapshot.val()?.friends || [];
        
        if (currentFriends.length === 0) {
            friendsList.innerHTML = '<li>–î–æ–±–∞–≤—å –¥—Ä—É–∑–µ–π —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å</li>';
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersSnapshot = await database.ref('users').once('value');
        const users = usersSnapshot.val() || {};
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π
        const friendsData = [];
        for (const uid in users) {
            const user = users[uid];
            if (currentFriends.includes(user.username)) {
                const time = calculateTime(user.startTime);
                friendsData.push({
                    username: user.username,
                    firstName: user.firstName,
                    startTime: user.startTime,
                    totalDays: time ? time.days : -1
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä—É–∑–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        friendsData.sort((a, b) => {
            if (a.totalDays === -1) return 1;
            if (b.totalDays === -1) return -1;
            return b.totalDays - a.totalDays;
        });

        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-3
        const topFriends = friendsData.slice(0, 3);

        // –°–æ–∑–¥–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        const fragment = document.createDocumentFragment();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π
        topFriends.forEach((friend, index) => {
            const li = createFriendElement(friend, index, false); // false - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            fragment.appendChild(li);
        });
        
        friendsList.appendChild(fragment);
        
    } catch (error) {
        console.error('Error rendering friends:', error);
    }
}

async function renderFriendsList() {
    const friendsList = document.getElementById('friendsList');
    if (!friendsList) return;
    
    try {
        const snapshot = await database.ref(`users/${userId}`).once('value');
        const currentFriends = snapshot.val()?.friends || [];
        
        if (currentFriends.length === 0) {
            friendsList.innerHTML = '<p>–î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å</p>';
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersSnapshot = await database.ref('users').once('value');
        const users = usersSnapshot.val() || {};
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π —Å –ø–æ–ª–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
        const friendsData = [];
        for (const uid in users) {
            const user = users[uid];
            if (currentFriends.includes(user.username)) {
                const time = calculateTime(user.startTime);
                const totalMinutes = time ? (time.days * 24 * 60) + (time.hours * 60) + time.minutes : -1;
                friendsData.push({
                    username: user.username,
                    firstName: user.firstName,
                    startTime: user.startTime,
                    totalMinutes: totalMinutes
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä—É–∑–µ–π –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∏–Ω—É—Ç
        friendsData.sort((a, b) => {
            if (a.totalMinutes === -1) return 1;
            if (b.totalMinutes === -1) return -1;
            return b.totalMinutes - a.totalMinutes;
        });

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        friendsList.innerHTML = '';
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-3 –¥—Ä—É–∑–µ–π
        const topFriends = friendsData.slice(0, 3);
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
        topFriends.forEach((friend, index) => {
            const li = createFriendElement(friend, index);
            friendsList.appendChild(li);
        });
        
    } catch (error) {
        console.error('Error rendering friends list:', error);
        friendsList.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π</p>';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
let statsCurrentPage = 0;
const statsPerPage = 4;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function renderFriendsStats() {
    const container = document.getElementById('friendsListStats');
    if (!container) return;

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentUserSnapshot = await database.ref(`users/${userId}`).once('value');
        const currentUserFriends = currentUserSnapshot.val()?.friends || [];

        if (currentUserFriends.length === 0) {
            container.innerHTML = '<p>–ù–µ—Ç –¥—Ä—É–∑–µ–π</p>';
            return;
        }

        const snapshot = await database.ref('users').once('value');
        const users = snapshot.val() || {};
        let friendsList = [];

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏—Ö –≤—Ä–µ–º—è —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
        for (const [uid, userData] of Object.entries(users)) {
            if (userData.username && currentUserFriends.includes(userData.username)) {
                const soberTime = calculateTime(userData.startTime);
                const totalMinutes = soberTime ? 
                    (soberTime.days * 24 * 60) + (soberTime.hours * 60) + soberTime.minutes : 
                    -1;

                friendsList.push({
                    userId: uid,
                    username: userData.username,
                    firstName: userData.firstName || '–ê–Ω–æ–Ω–∏–º',
                    startTime: userData.startTime,
                    totalMinutes: totalMinutes
                });
            }
        }

        if (friendsList.length === 0) {
            container.innerHTML = '<p>–ù–µ—Ç –¥—Ä—É–∑–µ–π</p>';
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        friendsList.sort((a, b) => {
            if (a.totalMinutes === -1) return 1;
            if (b.totalMinutes === -1) return -1;
            return b.totalMinutes - a.totalMinutes;
        });

        const statsContainer = document.createElement('div');
        statsContainer.className = 'friends-stats-container';
        
        const listWrapper = document.createElement('div');
        listWrapper.className = 'friends-list-wrapper';

        const totalPages = Math.ceil(friendsList.length / statsPerPage);
        
        for (let i = 0; i < totalPages; i++) {
            const pageDiv = document.createElement('div');
            pageDiv.className = 'friends-page';
            
            const pageItems = friendsList.slice(i * statsPerPage, (i + 1) * statsPerPage);
            pageItems.forEach((friend, index) => {
                const globalIndex = i * statsPerPage + index;
                const element = createFriendElement(friend, globalIndex, false, true);
                pageDiv.appendChild(element);
            });
            
            listWrapper.appendChild(pageDiv);
        }

        statsContainer.appendChild(listWrapper);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (totalPages > 1) {
            const pagination = document.createElement('div');
            pagination.className = 'friends-pagination';
            
            const prevBtn = document.createElement('button');
            prevBtn.textContent = '‚Üê';
            prevBtn.onclick = () => changePage('prev');
            
            const nextBtn = document.createElement('button');
            nextBtn.textContent = '‚Üí';
            nextBtn.onclick = () => changePage('next');
            
            pagination.appendChild(prevBtn);
            pagination.appendChild(nextBtn);
            
            container.innerHTML = '';
            container.appendChild(statsContainer);
            container.appendChild(pagination);
            
            function changePage(direction) {
                const wrapper = listWrapper;
                const currentPage = statsCurrentPage;
                
                if (direction === 'next' && currentPage < totalPages - 1) {
                    wrapper.style.transform = `translateX(-${(currentPage + 1) * 100}%)`;
                    statsCurrentPage++;
                } else if (direction === 'prev' && currentPage > 0) {
                    wrapper.style.transform = `translateX(-${(currentPage - 1) * 100}%)`;
                    statsCurrentPage--;
                }
                
                updatePagination();
            }
            
            function updatePagination() {
                prevBtn.disabled = statsCurrentPage === 0;
                nextBtn.disabled = statsCurrentPage === totalPages - 1;
            }
            
            updatePagination();
        } else {
            container.innerHTML = '';
            container.appendChild(statsContainer);
        }

    } catch (error) {
        console.error('Error rendering friends stats:', error);
        container.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π</p>';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        const targetScreen = btn.getAttribute('data-screen');
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        document.getElementById(targetScreen).classList.add('active');
        
        document.querySelectorAll('.nav-btn').forEach(navBtn => {
            navBtn.classList.remove('active');
        });
        btn.classList.add('active');
        
        if (targetScreen === 'statsScreen') {
            renderFriendsStats(); // –í–º–µ—Å—Ç–æ syncFriendsLists –≤—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.getElementById('startBtn').onclick = async () => {
    startTime = Date.now();
    document.getElementById('startBtn').style.display = 'none';
    document.getElementById('resetBtn').style.display = 'inline-block';
    
    await database.ref(`users/${userId}`).update({
        startTime: startTime
    });
    
    updateTimer();
    startTimerUpdates();
};

document.getElementById('resetBtn').onclick = async () => {
    startTime = null;
    document.getElementById('startBtn').style.display = 'inline-block';
    document.getElementById('resetBtn').style.display = 'none';
    
    await database.ref(`users/${userId}`).update({
        startTime: null
    });
    
    if (window.timerIntervals) {
        window.timerIntervals.forEach(interval => clearInterval(interval));
        window.timerIntervals = null;
    }
    
    updateTimer();
};

document.getElementById('setDateBtn').onclick = () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.createElement('div');
    container.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 80%;
        max-width: 300px;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        background: rgba(0, 0, 0, 0.9);
        padding: 20px;
        border-radius: 15px;
        border: 1px solid rgba(0, 204, 0, 0.3);
        text-align: center;
    `;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.createElement('div');
    title.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è';
    title.style.cssText = `
        color: #00cc00;
        font-size: 18px;
        margin-bottom: 15px;
        font-weight: bold;
        width: 100%;
    `;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∏–Ω–ø—É—Ç–æ–≤
    const dateContainer = document.createElement('div');
    dateContainer.className = 'date-time-input';
    dateContainer.style.width = '50%';
    
    const timeContainer = document.createElement('div');
    timeContainer.className = 'date-time-input';
    timeContainer.style.width = '50%';
    timeContainer.style.display = 'none';

    // –°–æ–∑–¥–∞–µ–º input –¥–ª—è –¥–∞—Ç—ã
    const dateInput = document.createElement('input');
    dateInput.type = 'date';
    dateInput.style.cssText = `
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 16px;
        color: #ffffff;
        background-color: #00cc00;
        width: 100%;
        margin: 5px 0;
        text-align: center;
    `;

    // –°–æ–∑–¥–∞–µ–º input –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    const timeInput = document.createElement('input');
    timeInput.type = 'time';
    timeInput.style.cssText = dateInput.style.cssText;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmBtn = document.createElement('button');
    confirmBtn.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å';
    confirmBtn.style.cssText = `
        margin-top: 10px;
        padding: 10px;
        background-color: #00cc00;
        color: #ffffff;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        cursor: pointer;
        display: none;
        width: 50%;
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    dateContainer.appendChild(dateInput);
    timeContainer.appendChild(timeInput);

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.appendChild(title);
    container.appendChild(dateContainer);
    container.appendChild(timeContainer);
    container.appendChild(confirmBtn);
    document.body.appendChild(container);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const now = new Date();
    dateInput.value = now.toISOString().split('T')[0];
    timeInput.value = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    dateInput.addEventListener('change', () => {
        timeContainer.style.display = 'block';
        timeInput.focus();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    timeInput.addEventListener('change', () => {
        confirmBtn.style.display = 'block';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmBtn.addEventListener('click', async () => {
        const selectedDate = new Date(`${dateInput.value}T${timeInput.value}`);
        if (!isNaN(selectedDate.getTime())) {
            startTime = selectedDate.getTime();
            await database.ref(`users/${userId}`).update({
                startTime: startTime
            });
            document.getElementById('startBtn').style.display = 'none';
            document.getElementById('resetBtn').style.display = 'inline-block';
            updateTimer();
            startTimerUpdates();
        }
        container.remove();
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '√ó';
    closeBtn.style.cssText = `
        position: absolute;
        top: 10px;
        right: 10px;
        background: none;
        border: none;
        color: #ff4444;
        font-size: 24px;
        cursor: pointer;
        padding: 0;
        margin: 0;
    `;
    closeBtn.onclick = () => container.remove();
    container.appendChild(closeBtn);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    dateInput.focus();
    dateInput.click();
};

document.getElementById('inviteFriendBtn').onclick = () => {
    const appUrl = `https://t.me/stopalko01_bot?start=ref_${userId}`;
    const messageText = startTime ? 
        `–Ø –Ω–µ –ø—å—é —É–∂–µ ${formatTimeToString(calculateTime(startTime))} - —Ç–µ–ø–µ—Ä—å —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —Å–∏—è—Ç—å! ‚ú®` :
        '–Ø –µ—â–µ –Ω–µ –≤–∫–ª—é—á–∏–ª —Ç–∞–π–º–µ—Ä, –Ω–æ —è —Å—Ç—Ä–µ–º–ª—é—Å—å –∫ —ç—Ç–æ–º—É!';
    const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(appUrl)}&text=${encodeURIComponent(messageText)}`;
    window.open(shareUrl, '_blank');
};

document.getElementById('addFriendBtn').onclick = async () => {
    const input = document.getElementById('friendUsername');
    const username = input.value.trim();
    
    const success = await addFriend(username);
    console.log('Add friend result:', success);
    
    if (success) {
        input.value = '';
    }
};

document.getElementById('addFriendBtnStats').onclick = async () => {
    const input = document.getElementById('friendUsernameStats');
    const username = input.value.trim();
    
    const success = await addFriend(username);
    console.log('Add friend result (stats):', success);
    
    if (success) {
        input.value = '';
        renderFriendsStats();
    }
};

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('click', function(event) {
    const input = document.querySelector('input[type="text"]');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –ø–æ–ª—é –≤–≤–æ–¥–∞ –∏ –Ω–µ –ø–æ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º
    if (input && !event.target.closest('.add-friend-form')) {
        input.blur(); // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –ø–æ–ª—è –≤–≤–æ–¥–∞, —á—Ç–æ —Å–∫—Ä–æ–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è touch-—Å–æ–±—ã—Ç–∏–π
document.addEventListener('touchstart', function(event) {
    const input = document.querySelector('input[type="text"]');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Å–∞–Ω–∏–µ –±—ã–ª–æ –Ω–µ –ø–æ –ø–æ–ª—é –≤–≤–æ–¥–∞ –∏ –Ω–µ –ø–æ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º
    if (input && !event.target.closest('.add-friend-form')) {
        input.blur(); // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –ø–æ–ª—è –≤–≤–æ–¥–∞, —á—Ç–æ —Å–∫—Ä–æ–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentDate = new Date();
let selectedDay = null;
let activeButton = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è –≤ Firebase
async function saveDayStatus(date, drinkType, remove = false) {
    try {
        const dayRef = database.ref(`users/${userId}/calendar/${date}`);
        
        if (drinkType === 'sober') {
            // –ï—Å–ª–∏ –æ—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å, —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏
            await dayRef.set({
                sober: true
            });
        } else if (remove) {
            // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –º–µ—Ç–∫—É
            const snapshot = await dayRef.once('value');
            const currentData = snapshot.val() || {};
            delete currentData[drinkType];
            
            if (Object.keys(currentData).length === 0) {
                await dayRef.remove();
            } else {
                await dayRef.update(currentData);
            }
        } else {
            // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª–∫–æ–≥–æ–ª—å –∏ –¥–µ–Ω—å –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ç—Ä–µ–∑–≤—ã–π
            const snapshot = await dayRef.once('value');
            const currentData = snapshot.val() || {};
            
            if (!currentData.sober) {
                await dayRef.update({
                    [drinkType]: true
                });
            }
        }
    } catch (error) {
        console.error('Error saving day status:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω–µ–π –∏–∑ Firebase
function loadCalendarData(year, month) {
    return database.ref(`users/${userId}/calendar`).once('value')
        .then((snapshot) => {
            const data = snapshot.val() || {};
            return data;
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –∫ –¥–Ω—é
function addDotToDay(dayElement, drinkType) {
    let dotContainer = dayElement.querySelector('.dot-container');
    if (!dotContainer) {
        dotContainer = document.createElement('div');
        dotContainer.className = 'dot-container';
        dayElement.appendChild(dotContainer);
    }

    const dot = document.createElement('div');
    dot.className = `dot ${drinkType}`;
    dotContainer.appendChild(dot);
    
    requestAnimationFrame(() => {
        dot.classList.add('visible');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function updateDayDisplay(dayElement, dayData) {
    if (!dayData) return;

    let dotContainer = document.createElement('div');
    dotContainer.className = 'dot-container';
    dayElement.appendChild(dotContainer);

    if (dayData.light) {
        const dot = document.createElement('div');
        dot.className = 'dot light';
        dotContainer.appendChild(dot);
        requestAnimationFrame(() => dot.classList.add('visible'));
    }
    if (dayData.medium) {
        const dot = document.createElement('div');
        dot.className = 'dot medium';
        dotContainer.appendChild(dot);
        requestAnimationFrame(() => dot.classList.add('visible'));
    }
    if (dayData.strong) {
        const dot = document.createElement('div');
        dot.className = 'dot strong';
        dotContainer.appendChild(dot);
        requestAnimationFrame(() => dot.classList.add('visible'));
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–µ–∫, —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if (!dotContainer.children.length) {
        dotContainer.remove();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è –≤ Firebase –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
function updateDrinkStatus(dayElement, dayDate, drinkType, calendarData) {
    const dateStr = `${dayDate.getFullYear()}-${dayDate.getMonth() + 1}-${dayDate.getDate()}`;
    const hasType = dayElement.querySelector(`.dot.${drinkType}`);
    
    // Check if the date is in the future
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    if (dayDate > today) {
        return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å
    if (drinkType === 'sober') {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
        const dotContainer = dayElement.querySelector('.dot-container');
        if (dotContainer) {
            dotContainer.remove();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å sober
        dayElement.classList.add('sober');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –¥–µ–Ω—å
        database.ref(`users/${userId}/calendar/${dateStr}`).set({
            sober: true
        });
        return;
    }

    // –ï—Å–ª–∏ –¥–µ–Ω—å –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ç—Ä–µ–∑–≤—ã–π, —É–±–∏—Ä–∞–µ–º –º–µ—Ç–∫—É
    if (dayElement.classList.contains('sober')) {
        dayElement.classList.remove('sober');
        saveDayStatus(dateStr, 'sober', true);
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–º–µ—Ç–∫–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (hasType) {
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ—á–µ–∫
    let dotContainer = dayElement.querySelector('.dot-container');
    if (!dotContainer) {
        dotContainer = document.createElement('div');
        dotContainer.className = 'dot-container';
        dayElement.appendChild(dotContainer);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
    const dot = document.createElement('div');
    dot.className = `dot ${drinkType}`;
    dotContainer.appendChild(dot);
    requestAnimationFrame(() => dot.classList.add('visible'));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    saveDayStatus(dateStr, drinkType, false);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω—è
function displayDayData(dayElement, dayData) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const oldDotContainer = dayElement.querySelector('.dot-container');
    if (oldDotContainer) {
        oldDotContainer.remove();
    }
    dayElement.classList.remove('sober');

    if (!dayData) return;

    // –ï—Å–ª–∏ –¥–µ–Ω—å —Ç—Ä–µ–∑–≤—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–µ–ª–µ–Ω—É—é –º–µ—Ç–∫—É
    if (dayData.sober) {
        dayElement.classList.add('sober');
        return;
    }

    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –∞–ª–∫–æ–≥–æ–ª—è
    const dotContainer = document.createElement('div');
    dotContainer.className = 'dot-container';
    dayElement.appendChild(dotContainer);

    if (dayData.light) {
        const dot = document.createElement('div');
        dot.className = 'dot light';
        dotContainer.appendChild(dot);
        requestAnimationFrame(() => dot.classList.add('visible'));
    }
    if (dayData.medium) {
        const dot = document.createElement('div');
        dot.className = 'dot medium';
        dotContainer.appendChild(dot);
        requestAnimationFrame(() => dot.classList.add('visible'));
    }
    if (dayData.strong) {
        const dot = document.createElement('div');
        dot.className = 'dot strong';
        dotContainer.appendChild(dot);
        requestAnimationFrame(() => dot.classList.add('visible'));
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–µ–∫, —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if (!dotContainer.children.length) {
        dotContainer.remove();
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateCalendar
function updateCalendar(direction = 'none') {
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                       '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    
    document.getElementById('monthYear').textContent = 
        `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;

    const calendarSlide = document.querySelector('.calendar-slide');
    const oldCalendar = document.getElementById('calendar');
    
    const newCalendar = document.createElement('div');
    newCalendar.id = 'calendar';
    newCalendar.className = 'days-grid';

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if (direction === 'left') {
        newCalendar.classList.add('next');
        if (oldCalendar) {
            oldCalendar.classList.add('prev');
        }
    } else if (direction === 'right') {
        newCalendar.classList.add('prev');
        if (oldCalendar) {
            oldCalendar.classList.add('next');
        }
    }

    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    
    let startingDay = firstDay.getDay() || 7;
    startingDay--;

    for (let i = 0; i < startingDay; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.className = 'calendar-day empty';
        newCalendar.appendChild(emptyDay);
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    loadCalendarData(currentDate.getFullYear(), currentDate.getMonth())
        .then(calendarData => {
            for (let day = 1; day <= lastDay.getDate(); day++) {
                const dayElement = document.createElement('div');
                const dateStr = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${day}`;
                const dayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
                dayDate.setHours(0, 0, 0, 0);
                
                dayElement.className = 'calendar-day';
                dayElement.textContent = day;

                if (dayDate > today) {
                    dayElement.classList.add('future');
                } else {
                    dayElement.addEventListener('click', () => {
                        if (!activeButton) return;
                        
                        const drinkType = activeButton.id.replace('Btn', '');
                        if (drinkType === 'reset') {
                            const dotContainer = dayElement.querySelector('.dot-container');
                            if (dotContainer) {
                                const dots = Array.from(dotContainer.children);
                                dots.forEach(dot => {
                                    dot.classList.remove('visible');
                                });
                                
                                setTimeout(() => {
                                    dotContainer.remove();
                                }, 300);
                            }
                            
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å
                            if (dayElement.classList.contains('sober')) {
                                dayElement.classList.remove('sober');
                                saveDayStatus(dayDate, 'sober', true);
                            }
                            
                            saveDayStatus(dayDate, 'light', true);
                            saveDayStatus(dayDate, 'medium', true);
                            saveDayStatus(dayDate, 'strong', true);
                        } else {
                            updateDrinkStatus(dayElement, dayDate, drinkType, calendarData);
                        }
                    });
                }

                if (calendarData && calendarData[dateStr]) {
                    displayDayData(dayElement, calendarData[dateStr]);
                }

                newCalendar.appendChild(dayElement);
            }

            if (direction !== 'none') {
                calendarSlide.appendChild(newCalendar);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                requestAnimationFrame(() => {
                    if (direction === 'left') {
                        if (oldCalendar) {
                            oldCalendar.classList.add('prev');
                            oldCalendar.classList.remove('current');
                        }
                        newCalendar.classList.remove('next');
                        newCalendar.classList.add('current');
                    } else if (direction === 'right') {
                        if (oldCalendar) {
                            oldCalendar.classList.add('next');
                            oldCalendar.classList.remove('current');
                        }
                        newCalendar.classList.remove('prev');
                        newCalendar.classList.add('current');
                    }
                });

                // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => {
                    if (oldCalendar && oldCalendar.parentNode) {
                        oldCalendar.remove();
                    }
                }, 300);
            } else {
                if (oldCalendar && oldCalendar.parentNode) {
                    oldCalendar.replaceWith(newCalendar);
                } else {
                    calendarSlide.appendChild(newCalendar);
                }
            }
        });
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function initCalendar() {
    document.getElementById('prevMonth').addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        updateCalendar('left');
    });

    document.getElementById('nextMonth').addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        updateCalendar('right');
    });

    const drinkButtons = document.querySelectorAll('.drink-btn');
    drinkButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            if (activeButton === btn) {
                btn.classList.remove('active');
                activeButton = null;
            } else {
                if (activeButton) {
                    activeButton.classList.remove('active');
                }
                btn.classList.add('active');
                activeButton = btn;
            }
        });
    });

    updateCalendar();
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    initCalendar();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const timerElement = document.getElementById('timer');
timerElement.style.visibility = 'hidden'; // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

database.ref(`users/${userId}`).once('value')
    .then((snapshot) => {
        const userData = snapshot.val();
        if (userData) {
            startTime = userData.startTime;
            if (startTime) {
                document.getElementById('startBtn').style.display = 'none';
                document.getElementById('resetBtn').style.display = 'inline-block';
                updateTimer();
                startTimerUpdates();
            }
        }
        timerElement.style.visibility = 'visible';
        renderFriendsList(); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ renderFriendsList
    })
    .catch((error) => {
        console.error('Error loading user data:', error);
        timerElement.style.visibility = 'visible';
    });

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const achievements = [
    { id: 1, days: 1, icon: 'üå±', title: '–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å', description: '–ù–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—É—Ç–∏' },
    { id: 7, days: 7, icon: 'üåü', title: '–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è', description: '7 –¥–Ω–µ–π —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏' },
    { id: 30, days: 30, icon: 'üåô', title: '–ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü', description: '–ú–µ—Å—è—Ü –Ω–æ–≤–æ–π –∂–∏–∑–Ω–∏' },
    { id: 90, days: 90, icon: 'üåû', title: '–¢—Ä–∏ –º–µ—Å—è—Ü–∞', description: '–ß–µ—Ç–≤–µ—Ä—Ç—å –≥–æ–¥–∞ —á–∏—Å—Ç–æ—Ç—ã' },
    { id: 180, days: 180, icon: 'üåà', title: '–ü–æ–ª–≥–æ–¥–∞', description: '180 –¥–Ω–µ–π —Å–≤–æ–±–æ–¥—ã' },
    { id: 365, days: 365, icon: 'üëë', title: '–û–¥–∏–Ω –≥–æ–¥', description: '–¶–µ–ª—ã–π –≥–æ–¥ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏!' }
];

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatistics(days) {
    // –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ (500 —Ä—É–±–ª–µ–π –≤ –¥–µ–Ω—å)
    const savedMoney = days * 500;
    document.querySelector('.money-value').textContent = formatMoney(savedMoney);
    
    // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–∏ (–≤ —Å—Ä–µ–¥–Ω–µ–º 5 —á–∞—Å–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏)
    const extraLifeDays = Math.floor((days * 5) / 24);
    document.querySelector('.life-value').textContent = `${extraLifeDays} –¥–Ω–µ–π`;
    
    // –ó–¥–æ—Ä–æ–≤—å–µ (–º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –∑–∞ 365 –¥–Ω–µ–π)
    const healthPercent = Math.min(100, Math.round((days / 365) * 100));
    document.querySelector('.health-value').textContent = `${healthPercent}%`;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgress(days) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é
    document.querySelector('.current-streak').textContent = days;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é —Å–µ—Ä–∏—é
    if (bestStreak < days) {
        bestStreak = days;
        saveBestStreak();
    }
    document.querySelector('.best-streak').textContent = bestStreak;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function updateAchievements(days) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStatistics(days);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateProgress(days);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª—å—Ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const circle = document.querySelector('.streak-ring .progress');
    const circumference = 283; // 2 * œÄ * 45 (—Ä–∞–¥–∏—É—Å)
    let nextAchievement = achievements[0];

    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–µ–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for (let achievement of achievements) {
        if (days < achievement.days) {
            nextAchievement = achievement;
            break;
        }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const prevAchievementDays = achievements[achievements.indexOf(nextAchievement) - 1]?.days || 0;
    const progress = ((days - prevAchievementDays) / (nextAchievement.days - prevAchievementDays)) * 100;
    const offset = circumference - (progress / 100) * circumference;
    circle.style.strokeDashoffset = offset;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    document.querySelector('.streak-count .days').textContent = days;
    document.querySelector('.info-item .value.money').textContent = formatMoney(days * 500);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements.forEach(achievement => {
        const element = document.getElementById(`achievement${achievement.id}`);
        if (!element) return;

        const progressBar = element.querySelector('.progress-bar');
        const statusText = element.querySelector('.status');
        
        if (days >= achievement.days) {
            if (!element.classList.contains('unlocked')) {
                element.classList.add('unlocked', 'just-unlocked');
                showNotification(`üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title}!`);
                setTimeout(() => element.classList.remove('just-unlocked'), 1000);
            }
            progressBar.style.width = '100%';
            statusText.textContent = '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ';
        } else {
            element.classList.remove('unlocked');
            const achievementProgress = Math.min(100, (days / achievement.days) * 100);
            progressBar.style.width = achievementProgress + '%';
            statusText.textContent = `${days}/${achievement.days} –¥–Ω–µ–π`;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥
function formatMoney(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        maximumFractionDigits: 0
    }).format(amount);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    requestAnimationFrame(() => {
        notification.classList.add('show');
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    });
}